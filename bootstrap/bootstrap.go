// Code generated by go-bindata.
// sources:
// bootstrap/README.md
// bootstrap/amazon_k8s_ubuntu_16.04_master.sh
// bootstrap/amazon_k8s_ubuntu_16.04_node.sh
// bootstrap/digitalocean_k8s_ubuntu_16.04_master.sh
// bootstrap/digitalocean_k8s_ubuntu_16.04_node.sh
// bootstrap/inject.go
// bootstrap/vpn/meshbirdMaster.sh
// bootstrap/vpn/meshbirdNode.sh
// bootstrap/vpn/openvpnMaster.sh
// bootstrap/vpn/openvpnNode.sh
// DO NOT EDIT!

package bootstrap

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bootstrapReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x91\xb1\x6e\xdc\x30\x10\x44\x7b\x7e\xc5\x00\x57\xa4\x31\x94\x4f\x08\x90\x22\xc0\x15\x49\x65\x38\xad\x28\x71\x64\xae\x8f\xe2\x0a\xe4\xd2\x82\x10\xe4\xdf\x03\xea\x1c\x23\x81\xeb\xdd\xd9\x79\x3b\x73\xc1\x57\x55\xab\x56\xfc\xe6\xdc\x63\x64\x25\x7c\x21\x2c\x12\xd3\xdf\x01\xea\x5c\x64\xb3\x0a\x8b\xde\x50\xa3\x6c\xd8\xc5\xe2\xb9\x14\xb8\xf8\x96\x0c\xe3\xad\x4d\x32\x6b\xc9\x23\xb6\xa2\x8b\x24\xd6\xc1\xb9\x6f\x64\xc2\x52\x48\x98\xc2\x87\x80\x43\x5b\x81\xee\xf9\x01\x5a\xb0\x6a\x90\xe5\xe8\x67\xba\xab\xc1\xe7\x03\x26\x2b\x87\x93\xe4\xdd\xb5\xf3\x70\x59\x38\x9b\xbc\x32\x1d\xd8\x3b\xc5\x4e\xb4\xae\xaa\x18\x5b\x65\x41\xf0\xe6\xc7\xee\x22\x59\x0c\x1e\x4f\xdf\x9d\xbb\x5c\x2e\xb8\x22\x93\xa1\x0f\x8c\xeb\x96\xbc\x11\xda\x0c\x9a\x09\x5d\xde\xac\x3f\x3c\xea\xdc\x0f\xed\xa8\x08\x9a\x3f\xd9\x80\x9f\x45\x8c\x98\x7c\x8d\x48\x72\x23\x7c\xff\x71\xf8\xcf\x60\xd5\xc2\x13\x02\x92\xe1\x3f\x9c\xbc\x43\xd7\xa8\x2d\x05\x5c\x11\xf4\x8b\x73\xd7\xe5\xf4\x28\xf4\x29\x1d\x98\x7d\x86\xe6\x74\xe0\x99\x06\x31\x2c\x45\xd7\x7f\x53\xf5\x39\x20\xeb\x1e\xd9\xd3\x48\x95\x0f\xa7\xb8\xab\x7a\x0e\xbd\x8a\xf1\xc9\xa7\xc6\xfa\xeb\xf7\x88\x6a\xa5\xcd\xd6\xbf\x0e\x5c\x24\x13\x73\xab\xa6\x2b\x6e\x3c\x3e\xbf\xf6\x2d\x6c\x5e\xca\x5b\xa1\xbb\xa4\x84\x89\x90\xfc\xc2\xd9\x18\x20\xd9\xf4\xde\xd4\x1d\x7e\x70\x8f\x51\xea\xfb\x9e\xc7\xac\x81\x98\xa3\xcf\xcf\x7c\x38\xc1\xa4\x76\x11\x73\xb8\x47\x3d\x11\x2f\xad\xda\x79\x7e\xf8\x13\x00\x00\xff\xff\x8c\x9a\x9e\x97\x62\x02\x00\x00")

func bootstrapReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapReadmeMd,
		"bootstrap/README.md",
	)
}

func bootstrapReadmeMd() (*asset, error) {
	bytes, err := bootstrapReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/README.md", size: 610, mode: os.FileMode(436), modTime: time.Unix(1501967388, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapAmazon_k8s_ubuntu_1604_masterSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x54\x4d\x6f\xdc\x36\x10\xbd\xf3\x57\xbc\xee\x1a\x48\x03\x84\xa2\x9d\x16\x2d\x60\xc0\x05\x92\xd4\x07\x37\x45\x62\x18\x6e\x7b\xe9\x85\x22\x67\x25\x76\x29\x52\x20\x87\x6b\x2f\x6c\xf7\xb7\x17\x94\x64\x7b\x8d\x06\x45\x6f\xd9\x8b\x76\x1e\x67\xde\x7c\x3d\x72\xfd\x8d\x2a\x39\xa9\xd6\x05\x45\x61\x87\x56\xe7\x5e\x64\x62\x48\x12\xc6\xe2\x6f\x21\xd6\x90\x5f\xe9\x27\xd6\xb8\xee\x29\x13\x76\xda\x17\xca\xd0\x89\xe0\xc2\x5f\x64\x98\x2c\x5c\xe0\x08\xee\x09\xd9\x24\x37\x72\x83\x3f\x68\x72\xa0\xdb\xd1\x3b\xe3\xd8\xef\x11\x22\xa3\x64\x17\x3a\x68\x30\x0d\xa3\xd7\x5c\x0d\xaf\x43\x57\x74\x47\xe0\xb8\xd0\x4d\x3c\x73\x12\xb1\x86\xce\xf5\x84\x82\x89\x25\x4d\x6e\x3d\xa1\x64\x4a\x15\xf5\x6e\x70\x93\xbb\x4b\x15\x43\xdc\xbc\x60\x8e\x9d\x33\x70\xa1\x3a\x64\xc2\xc6\x79\xca\x0d\xde\xef\x61\x29\xbb\x2e\x40\x7b\xff\xdc\xc0\xd2\x54\xee\x63\xf1\x56\xac\xd1\x12\x74\xeb\xa7\xaa\x5a\x42\x5d\x81\x66\xa4\x12\xd8\x0d\xf4\x06\x3a\xd8\xb9\xdb\x9e\xbc\x5f\x7a\x46\x22\xed\x71\x13\xd3\xb6\xc1\xc5\x06\xfb\x58\x10\x88\x2c\x4c\x0c\xd6\xb1\x8b\x41\xfb\xb9\xa4\x37\xb8\x49\x8e\x09\x8e\x6b\x71\xd3\x8a\xd7\x88\x09\x83\xde\x12\x74\x88\xdc\x53\x7a\xc1\xdc\x88\xb5\x58\x8b\xeb\xcf\x1f\xcf\x3f\x9d\xad\x2e\x3e\xfd\x72\xfe\xe1\xfa\xfc\xe7\xc9\x5c\x89\xcb\xcf\x57\xd7\xcf\x60\xb5\x56\x5f\x53\x23\xc2\x94\xe4\x21\x33\x7a\xe6\x31\x9f\x2a\x35\x6a\xb3\xd5\x1d\xe5\xc6\xf8\x58\x6c\xd3\xc5\xd8\x79\x6a\x4c\x1c\x94\x1e\x59\xd9\x68\xea\x57\x6e\x69\xdf\x74\x63\x87\x7b\xe4\x62\x23\x16\x08\xda\x5a\x48\xc1\xb1\x98\x1e\x8a\x78\xf2\x55\x39\x96\x64\x28\x37\xde\x65\x6e\xac\xda\x96\x96\x52\x20\x5e\x10\x91\x7b\x48\x83\x57\x64\xfa\x88\x95\xa5\x76\xaa\xe4\x54\xd5\xd0\xe6\xc0\xd7\x45\x85\x67\x53\xde\x52\x70\xda\x63\xd0\x2e\xac\xf0\xd3\xff\x4d\xf6\x4a\x88\x5a\x6a\x47\x8c\x32\x5a\xcd\x04\xb9\x7f\x42\x5c\xc8\x5c\x25\x26\xf7\xf8\x53\x00\x40\x8e\x46\xf3\xf2\x9f\x5a\xae\xf2\xca\x8b\x69\xa3\xd9\x52\x6a\x5c\x5c\xec\xca\xc1\x49\x87\x3c\xc6\xc4\x72\x9a\xe5\x72\x52\x2b\xf0\xc4\x07\x96\xb6\xc3\xd9\x49\xf3\x63\x73\x2c\x8f\x8f\x17\x78\x9a\xb5\x2c\xec\x7c\x16\x42\xe4\x7d\x66\x1a\x0c\x7b\x50\x98\x34\x3d\x67\x3b\xc0\x33\xeb\xc4\x8f\xb0\xb8\xfc\xed\xfd\xaf\x17\x1f\x2e\x2e\xcf\x8e\xbe\x25\xf3\x76\x20\xd6\x56\xb3\x86\x94\x63\x69\xbd\x33\xd2\x8d\xbb\xef\x71\x0f\x53\x18\xd2\x62\x85\x15\xe4\x06\x6f\x5f\x8b\xcb\xab\x8b\xdf\xdf\x5d\x9f\x4f\x81\x6e\x63\x62\xd8\xb8\xba\xd1\x2e\xd1\x08\xf9\x0e\x27\x20\xee\x8f\x1f\x01\x17\x88\x0f\x48\x4e\x67\x92\x7f\xd1\x9e\xe0\x1e\xb7\x3a\x75\xf9\xb5\x10\x4b\xb3\x48\x94\x89\x9f\x2c\x17\x1c\x43\x4a\x3d\xba\x4c\x69\x47\x49\xb6\x2e\x58\x59\xe7\x86\xa3\xbb\x7a\x1f\x1e\x20\x25\xc7\x2d\x05\x1c\xdd\x4d\x97\xe6\x01\x2f\xfc\xb5\xdd\x51\x62\x97\x49\x6a\x6b\x13\xe5\x5c\xe3\x96\x11\x3c\xbc\xf0\x34\x94\x58\xd2\x2d\x27\x2d\xb3\x0e\x2f\xfd\x8e\xee\x9e\xda\x7f\x10\xd3\x53\xa9\xc3\x36\xe3\x23\xf9\x4c\x7b\x9c\xbe\x9e\xea\xad\xb3\xd6\xe3\xe8\x67\x45\xc8\xcd\xa3\x36\x6d\x34\xb9\x19\x53\xac\x6f\x91\xd1\xde\x99\xd8\xc4\xd4\xa9\xdd\xdb\xe6\x3b\xd5\x11\xd7\xd7\x4c\x4e\x3b\xa2\x43\x09\xaa\x45\x61\xba\x3e\x2e\xaa\x8f\xf9\xf1\x58\xdb\x41\x9d\x34\x3f\xa8\x85\x6a\xaf\x07\x3f\x27\x94\x53\x11\xf3\x62\x26\x89\x1f\x90\x69\x3b\xb8\xd0\xd4\x43\x21\x86\xad\x75\x09\x72\x84\xea\xe3\x40\xaa\xb4\x25\x70\x51\xd3\xf5\x11\x66\xfc\x8f\xd0\x2f\x04\xa8\x39\x9f\x30\x7d\xbc\x09\x90\x57\x98\x0f\x4f\xe7\xcf\x17\x02\xfe\x09\x00\x00\xff\xff\x97\x66\x54\x00\x03\x07\x00\x00")

func bootstrapAmazon_k8s_ubuntu_1604_masterShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapAmazon_k8s_ubuntu_1604_masterSh,
		"bootstrap/amazon_k8s_ubuntu_16.04_master.sh",
	)
}

func bootstrapAmazon_k8s_ubuntu_1604_masterSh() (*asset, error) {
	bytes, err := bootstrapAmazon_k8s_ubuntu_1604_masterShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/amazon_k8s_ubuntu_16.04_master.sh", size: 1795, mode: os.FileMode(436), modTime: time.Unix(1502272640, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapAmazon_k8s_ubuntu_1604_nodeSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x52\x3d\x6f\xdc\x38\x14\xec\xf9\x2b\xe6\x56\x06\xdc\x58\x92\xaf\x3a\xc0\x80\x0f\xb8\x8f\x2d\x7c\x87\x38\x40\xb2\x40\x9a\x34\x14\xf9\x2c\xd1\x4b\xf1\x09\x7c\x8f\xb6\x17\x8e\xf3\xdb\x03\x69\x15\x7f\x74\xe9\xac\x46\x9a\xe1\x68\x38\x8f\x9c\xea\xb7\xb6\x48\x6e\xbb\x90\x5a\x4a\x77\xe8\xac\x0c\x46\x48\x51\x93\x71\x1e\xdf\x8d\xa9\x50\xbf\xd3\x63\x2a\xec\x06\x12\xc2\x9d\x8d\x85\x04\x36\x13\x42\xba\x25\xa7\xe4\x11\x92\x32\x74\x20\x88\xcb\x61\xd2\x06\x5f\x68\x11\xd0\xc3\x14\x83\x0b\x1a\x0f\x48\xac\x28\x12\x52\x0f\x0b\xa5\x71\x8a\x56\x67\x10\x6d\xea\x8b\xed\x09\xca\xab\xdd\xe2\x73\xdc\xc4\x54\xb0\x32\xaf\x50\x72\x5c\xf2\x22\x1b\x08\x45\x28\xcf\x6c\x0c\x63\x58\xe4\x21\xcf\x1c\xf8\xe6\x8d\x33\xf7\xc1\x21\xa4\x59\x20\x84\x9b\x10\x49\x1a\xfc\x7d\x80\x27\x09\x7d\x82\x8d\xf1\x65\x80\x75\x28\x19\xb8\x44\x6f\x2a\x74\x04\xdb\xc5\x25\x55\x47\x98\xaf\xc0\x2a\x72\x49\x1a\x46\x3a\x83\x4d\xfe\x38\xed\x40\x31\xae\x33\x23\x93\x8d\xb8\xe7\xbc\x6f\x70\x75\x83\x03\x17\x24\x22\x0f\xc7\xc9\x07\x0d\x9c\x6c\x3c\x46\x3a\xc3\x7d\x0e\x4a\x08\x3a\x87\x5b\xae\xb8\x02\x67\x8c\x76\x4f\xb0\x89\x75\xa0\xfc\xc6\xb9\x31\x95\xa9\xcc\xee\xe3\xff\xdb\xeb\xcb\xcd\xd5\xf5\x7f\xdb\x7f\x76\xdb\x7f\x17\xb8\x31\x1f\xfe\xfa\xbc\xdb\x7e\x7a\xa1\x8f\x78\xf3\x9e\x3d\x31\xae\xe4\x88\x5a\x30\xa8\x4e\x72\xd1\xb6\x93\x75\x7b\xdb\x93\x34\x2e\x72\xf1\x4d\xcf\xdc\x47\x6a\x1c\x8f\xad\x9d\xb4\xf5\xec\xe6\x77\xbd\xa7\x43\xd3\x4f\x3d\xbe\x41\x8a\x67\xac\x14\xac\xf7\xa8\x8d\x72\x71\x03\x5a\xd2\x45\xdb\x0a\x97\xec\x48\x9a\x18\x44\x1b\xdf\xee\x4b\x47\x39\x91\xae\x8c\x91\x01\xb5\xc3\x29\xb9\x81\xb1\xf1\xd4\x2d\x49\x2e\xda\xf9\xd7\xe6\x95\x36\x70\x8b\x17\x58\x3f\x50\x0a\x36\x62\xb4\x21\x6d\xf0\xe7\xaf\x6e\x76\x6a\xcc\x1c\xb5\x27\x45\x99\xbc\x55\x42\x7d\x78\x66\x42\x12\x9d\x6b\x56\x1f\xf0\xd5\x00\x80\xb0\xb3\xba\x7e\x53\xa7\x73\xc5\x64\x85\x9e\xdd\x9e\x72\x13\x78\xc5\xb3\x87\x66\x9b\x64\xe2\xac\xf5\x72\x96\xeb\xca\x9c\x20\x92\xbe\x42\xd6\x8f\x97\xbf\x37\x7f\x34\xe7\xf5\xf9\xb9\x31\x72\x10\xa5\xd1\x69\x04\xa5\xa5\xc4\x47\xeb\x57\xbc\xa8\xcd\xfa\x93\x36\xab\x03\x32\x09\xe9\x33\xba\xe5\x90\x50\xd7\xca\x7b\x4a\x38\x79\x5c\xfa\xf6\x84\x93\xc7\x63\xc3\x9e\x7e\x04\x00\x00\xff\xff\x23\x59\x14\x94\xaa\x04\x00\x00")

func bootstrapAmazon_k8s_ubuntu_1604_nodeShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapAmazon_k8s_ubuntu_1604_nodeSh,
		"bootstrap/amazon_k8s_ubuntu_16.04_node.sh",
	)
}

func bootstrapAmazon_k8s_ubuntu_1604_nodeSh() (*asset, error) {
	bytes, err := bootstrapAmazon_k8s_ubuntu_1604_nodeShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/amazon_k8s_ubuntu_16.04_node.sh", size: 1194, mode: os.FileMode(436), modTime: time.Unix(1502272644, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapDigitalocean_k8s_ubuntu_1604_masterSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x55\xc1\x6e\x1b\x37\x10\xbd\xf3\x2b\x5e\x25\x03\x69\x80\x90\xb4\x53\xa0\x05\x0c\xb8\x40\x92\xfa\xe0\xb6\x48\x0c\xc3\x6d\x2f\xbd\x50\xe4\x68\x97\x15\x97\x5c\x90\xb3\x8a\x05\xc7\xf9\xf6\x82\xd4\xca\x96\x2e\x45\x6f\xd1\x45\x9a\xc7\xc7\x37\x6f\x38\x43\x4a\x2c\xbf\xd3\x53\xc9\x7a\xe5\xa3\xa6\xb8\xc5\xca\x94\x5e\x14\x62\x48\x12\xd6\xe1\xab\x10\x4b\xc8\x6f\xf4\x11\x4b\xdc\xf7\x54\x08\x5b\x13\x26\x2a\x30\x99\xe0\xe3\x3f\x64\x99\x1c\x7c\xe4\x04\xee\x09\xc5\x66\x3f\xb2\xc2\x5f\xd4\x08\xf4\x30\x06\x6f\x3d\x87\x1d\x62\x62\x4c\xc5\xc7\x0e\x06\x4c\xc3\x18\x0c\xd7\x20\x98\xd8\x4d\xa6\x23\x70\x9a\xe5\x9a\xce\x3e\x89\x58\xc2\x94\xba\x42\xd1\xa6\x29\x37\x5a\x4f\x98\x0a\xe5\x8a\x06\x3f\xf8\x46\xf7\xb9\x62\x48\xeb\x13\xe5\xd4\x79\x0b\x1f\x2b\xa1\x10\xd6\x3e\x50\x51\x78\xbf\x83\xa3\xe2\xbb\x08\x13\xc2\x4b\x01\x73\x51\xa5\x4f\x53\x70\x62\x89\x15\xc1\xac\x42\x73\xb5\x22\xd4\x16\x18\x46\x9e\x22\xfb\x81\xde\xc0\x44\xb7\xaf\xb6\xa7\x10\xe6\x9a\x91\xc9\x04\x7c\x4e\x79\xa3\x70\xb3\xc6\x2e\x4d\x88\x44\x0e\x36\x45\xe7\xd9\xa7\x68\xc2\xde\xd2\x1b\x7c\xce\x9e\x09\x9e\xab\xb9\xd6\xe2\x25\x52\xc6\x60\x36\x04\x13\x13\xf7\x94\x4f\x94\x95\x58\x8a\xa5\xb8\xff\xf4\xdb\xf5\xc7\xab\xc5\xcd\xc7\x5f\xaf\x3f\xdc\x5f\xff\xd2\xc2\x85\xb8\xfd\x74\x77\xff\x02\xd6\x68\xd1\xd8\xdf\x70\x4e\xc4\xed\xdd\xcd\x9f\xef\xee\xaf\x6f\x6e\xaf\xce\xbe\xf7\x6b\x9b\xe2\xda\x77\xf8\x82\x2e\xd3\x08\xf9\x0e\x17\x58\xf0\x14\xcf\x17\x07\xc8\x47\x62\xe0\x0b\xec\xc4\x90\x0e\x8b\xcb\x05\xe4\x1a\x6f\x8f\x10\x34\xe4\xe2\xb5\x20\xdb\x27\x9c\x3d\xeb\xe3\x67\x68\x1e\x46\xad\xfc\x28\x6e\xff\x78\xff\xfb\xcd\x87\x96\xd3\x4e\x39\xe0\x90\x58\x0d\xf4\x5a\x88\x06\xc9\x82\x9e\x79\x2c\x97\x5a\x8f\xc6\x6e\x4c\x47\x45\xd9\x90\x26\xa7\xba\x94\xba\x40\xca\xa6\x41\x9b\x91\xb5\x4b\xb6\x7e\xcb\x0d\xed\x54\x37\x56\xef\x65\x72\x09\x33\x04\xe3\x1c\xa4\xe0\x34\xd9\x1e\x9a\xb8\x71\x75\x49\x53\xb6\x54\x54\xf0\x85\x95\xd3\x9b\x69\x45\x39\x12\xcf\x88\x28\x3d\xa4\xc5\xab\x56\xc0\xc2\xd1\xaa\x39\xb9\xd4\x75\xab\x3a\xe2\xfa\xa4\xf1\x12\xca\x07\x8a\xde\x04\x0c\xc6\xc7\x45\x2d\xf6\xff\x25\x7b\x25\x44\xb5\xda\x11\x63\x1a\x9d\x61\x82\xdc\x3d\x23\x3e\x16\xae\x93\x2f\x77\xf8\x5b\x00\x40\x49\xd6\xf0\xfc\x9b\x56\x5c\xa7\xbe\xcc\xa1\x4b\x76\x43\x59\xf9\x34\xc7\x55\x83\xb3\x89\x65\x4c\x99\x65\x3b\xcb\x79\xa5\x3a\x08\xc4\x47\x91\x71\xc3\xd5\x85\xfa\x49\x9d\xcb\xf3\xf3\x19\x6e\x67\x2d\x27\xf6\xa1\x08\x21\xca\xae\x30\x0d\x96\x03\x28\xb6\xab\xb6\xcf\x76\x84\x17\x36\x99\x0f\xb0\x98\x45\x91\xa9\x10\x3f\x47\x3e\x7a\x86\x94\x66\xf4\x85\xf2\x96\xb2\x5c\xf9\xe8\x64\xf5\x87\xb3\xc7\x7a\x1d\x9e\x20\x25\xa7\x0d\x45\x9c\x3d\xb6\x3b\xf3\x84\x13\xbe\x71\x5b\xca\xec\x0b\x49\xe3\x5c\xa6\x52\xea\xbe\x79\x96\x9e\x4e\x98\x96\x32\x4b\x7a\xe0\x6c\x64\x31\xf1\x94\x77\xf6\xf8\x3c\x94\x4f\x62\xef\xb5\x56\x60\xc6\x31\xec\xcf\x59\xae\x0f\x1d\x77\xc9\x16\x35\xe6\x54\x1f\x1e\x6b\x82\xb7\x49\xa5\xdc\xe9\xed\x5b\xf5\x83\xee\x88\xeb\xd3\x25\x5b\xe5\x74\xdc\x58\x3d\xf7\xcd\xd4\x97\x44\xf7\xa9\x1c\x96\x8d\x1b\xf4\x85\xfa\x51\xcf\x52\x3b\x33\x84\x7d\x42\xd9\x4c\xec\x2f\x5f\x1b\x9c\x23\x31\xe3\x06\x1f\x55\x5d\xac\xff\x28\x77\x29\xb1\x18\x36\xce\x67\xc8\x11\x5f\x75\x1b\x48\x61\xc7\xff\xd8\x76\x60\xe9\x7d\x02\x21\xfe\x0d\x00\x00\xff\xff\x18\x50\x3e\x5c\xba\x06\x00\x00")

func bootstrapDigitalocean_k8s_ubuntu_1604_masterShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapDigitalocean_k8s_ubuntu_1604_masterSh,
		"bootstrap/digitalocean_k8s_ubuntu_16.04_master.sh",
	)
}

func bootstrapDigitalocean_k8s_ubuntu_1604_masterSh() (*asset, error) {
	bytes, err := bootstrapDigitalocean_k8s_ubuntu_1604_masterShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/digitalocean_k8s_ubuntu_16.04_master.sh", size: 1722, mode: os.FileMode(436), modTime: time.Unix(1502272727, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapDigitalocean_k8s_ubuntu_1604_nodeSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x52\x4d\x4f\xdc\x4a\x10\xbc\xfb\x57\xd4\x5b\x23\x71\xc1\x36\xef\xf4\x24\x24\x9e\x94\x8f\x3d\x90\x28\x44\x4a\x56\xca\x25\x97\xf1\x4c\x63\x0f\x3b\x9e\xb6\xa6\x7b\x80\x15\x21\xbf\x3d\xf2\x07\x02\x92\x4b\x6e\xf8\x62\x57\x75\x77\x4d\xb5\xa7\x8a\xf2\x9f\x26\x4b\x6a\x5a\x1f\x1b\x8a\x37\x68\x8d\xf4\x85\x90\xa2\xa2\xc2\x3a\xfc\x2c\x8a\x12\xd5\x2b\x3d\x45\x89\x5d\x4f\x42\xb8\x31\x21\x93\xc0\x24\x82\x8f\xd7\x64\x95\x1c\x7c\x54\x86\xf6\x04\xb1\xc9\x8f\x5a\xe3\x1b\xcd\x0d\x74\x37\x06\x6f\xbd\x86\x03\x22\x2b\xb2\xf8\xd8\xc1\x40\x69\x18\x83\xd1\x09\x04\x13\xbb\x6c\x3a\x82\xf2\x2a\x37\xeb\x2c\x87\x14\x25\x8c\x4c\x15\x8a\x96\x73\x9a\xdb\x7a\x42\x16\x4a\x13\x1b\xfc\xe0\xe7\x76\x9f\x26\x0e\x7c\xf5\x42\x99\x3b\x6f\xe1\xe3\xd4\x20\x84\x2b\x1f\x48\x6a\xbc\x3d\xc0\x91\xf8\x2e\xc2\x84\xf0\xb4\xc0\xba\x94\xf4\x9c\x83\x2b\x4a\xb4\x04\xd3\x86\xd9\x55\x4b\x98\xae\xc0\x28\x52\x8e\xea\x07\x3a\x81\x89\x6e\xd9\xb6\xa7\x10\xd6\x9d\x91\xc8\x04\xdc\x72\xda\xd7\xb8\xb8\xc2\x81\x33\x22\x91\x83\xe5\xe8\xbc\x7a\x8e\x26\x2c\x96\x4e\x70\x9b\xbc\x12\xbc\x4e\xe6\xe6\x2b\x2e\xc1\x09\x83\xd9\x13\x4c\x64\xed\x29\xbd\x50\xae\x8b\xb2\x28\x8b\xdd\xe7\x8f\xdb\xcb\xf3\xcd\xc5\xe5\x87\xed\xbb\xdd\xf6\xfd\x0c\x37\xc5\xa7\x37\x5f\x77\xdb\x2f\x4f\xf4\x82\x37\xaf\x99\x93\x42\xb2\x63\xd8\x9c\x02\x2a\x41\xaf\x3a\xca\x59\xd3\x8c\xc6\xee\x4d\x47\x52\xdb\xc0\xd9\xd5\x1d\x73\x17\xa8\xb6\x3c\x34\x66\xd4\xc6\xb1\x9d\xde\xd5\x9e\x0e\x75\x37\x76\xf8\x81\x59\x64\xa5\x60\x9c\x43\xb5\xe8\x2a\x67\xdb\xa3\x21\x9d\x07\x1a\xe1\x9c\x2c\x49\x1d\xbc\x68\xed\x9a\x7d\x6e\x29\x45\xd2\x95\x59\x46\xa4\x47\x65\x71\x4c\xb6\x67\x6c\x1c\xb5\xb3\xa7\xb3\x66\x9a\xaf\x9f\x0d\x78\x6e\xf0\x04\xab\x3b\x8a\xde\x04\x0c\xc6\xc7\x0d\xfe\xff\xdb\x13\x8f\xd7\xf5\x27\xe7\x1d\x29\xf2\xe8\x8c\x12\xaa\xc3\x4b\xda\x47\xd1\x29\x7f\xd5\x01\xdf\x0b\x00\x10\xb6\x46\xd7\x6f\x6a\x75\xca\x9e\xac\xd0\xb1\xdd\x53\xaa\x3d\xaf\x78\xd2\xd0\x64\xa2\x8c\x9c\xb4\x9a\xff\xef\x5a\x99\xbc\x04\xd2\x67\xc8\xb8\xe1\xfc\xdf\xfa\xbf\xfa\xb4\x3a\x3d\x5d\x9d\xc9\x41\x94\x06\xab\x01\x14\xe7\x88\x2f\xfa\xbf\x17\x45\x4d\xd2\xc7\xda\x52\xac\xb6\x8f\x9a\x48\x24\xa4\x7f\xb0\xd7\xec\x23\xaa\x4a\x79\x4f\x11\x47\xf7\x73\x44\x1f\x70\x74\xbf\x84\xf2\xa1\xf8\x15\x00\x00\xff\xff\x4c\xd3\xf9\xfb\xdf\x04\x00\x00")

func bootstrapDigitalocean_k8s_ubuntu_1604_nodeShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapDigitalocean_k8s_ubuntu_1604_nodeSh,
		"bootstrap/digitalocean_k8s_ubuntu_16.04_node.sh",
	)
}

func bootstrapDigitalocean_k8s_ubuntu_1604_nodeSh() (*asset, error) {
	bytes, err := bootstrapDigitalocean_k8s_ubuntu_1604_nodeShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/digitalocean_k8s_ubuntu_16.04_node.sh", size: 1247, mode: os.FileMode(436), modTime: time.Unix(1502272670, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapInjectGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x91\xd1\x6a\xdb\x30\x18\x85\xaf\xa3\xa7\x38\xe4\x2a\x01\xcf\x6e\x7b\x33\xe8\xd8\x85\xd7\x76\xcc\xb4\x24\x10\xa7\x2b\xa5\xf4\x42\x96\xff\xd8\x5a\x1d\x49\x93\x7e\xd7\x0d\xa5\x0f\xb4\xd7\xd8\x93\x0d\x25\xce\x58\x99\x6f\x0c\xfa\xcf\xf9\x74\xce\xaf\x2c\xc3\x85\x75\x3b\xaf\x9b\x96\xf1\xfb\x17\xce\x4e\x4e\x3f\x62\xdd\x12\xae\xfb\x4a\x2b\xeb\x0d\xf2\x9e\x5b\xeb\x83\xc8\x32\x91\x65\xb8\xd1\x8a\x4c\xa0\x1a\xbd\xa9\xc9\x83\x5b\x42\xee\xa4\x6a\xe9\x38\x49\xf0\x9d\x7c\xd0\xd6\xe0\x2c\x3d\xc1\x2c\x0a\xa6\xe3\x68\x3a\xff\x14\x11\x3b\xdb\x63\x2b\x77\x30\x96\xd1\x07\x02\xb7\x3a\x60\xa3\x3b\x02\xbd\x28\x72\x0c\x6d\xa0\xec\xd6\x75\x5a\x1a\x45\x18\x34\xb7\xfb\x7b\x46\x4a\x1a\x19\xf7\x23\xc3\x56\x2c\xb5\x81\x84\xb2\x6e\x07\xbb\xf9\x57\x08\xc9\x63\xe8\xf8\xb5\xcc\xee\x3c\xcb\x86\x61\x48\xe5\x3e\x70\x6a\x7d\x93\x75\x07\x69\xc8\x6e\x8a\x8b\xab\x45\x79\xf5\xe1\x2c\x3d\x19\x4d\xb7\xa6\xa3\x10\xe0\xe9\x67\xaf\x3d\xd5\xa8\x76\x90\xce\x75\x5a\xc9\xaa\x23\x74\x72\x80\xf5\x90\x8d\x27\xaa\xc1\x36\x86\x1e\xbc\x66\x6d\x9a\x04\xc1\x6e\x78\x90\x9e\x22\xa6\xd6\x81\xbd\xae\x7a\x7e\xb7\xb3\x63\x44\x1d\xde\x09\xac\x81\x34\x98\xe6\x25\x8a\x72\x8a\x2f\x79\x59\x94\x49\x84\xdc\x15\xeb\x6f\xcb\xdb\x35\xee\xf2\xd5\x2a\x5f\xac\x8b\xab\x12\xcb\x15\x2e\x96\x8b\xcb\x62\x5d\x2c\x17\x25\x96\x5f\x91\x2f\xee\x71\x5d\x2c\x2e\x13\x90\xe6\x96\x3c\xe8\xc5\xf9\xd8\xc0\x7a\xe8\xb8\x4d\xaa\xf7\xab\x2b\x89\xde\x45\xd8\xd8\x43\xa4\xe0\x48\xe9\x8d\x56\xe8\xa4\x69\x7a\xd9\x10\x1a\xfb\x4c\xde\x68\xd3\xc0\x91\xdf\xea\x10\x5f\x35\x40\x9a\x3a\x62\x3a\xbd\xd5\x2c\x79\x7f\xf4\x5f\xaf\x54\x08\x27\xd5\x53\x84\x54\xd6\x72\x60\x2f\x9d\x10\x7a\xeb\xac\x67\x4c\x63\x5f\xd3\x84\xa9\x10\x9b\xde\x28\x14\xe6\x07\x29\x9e\xd5\x92\x25\x1e\x1e\xab\x1d\x53\x82\x67\xd9\xf5\x14\xb0\x95\xee\xe1\xa0\x7e\x3c\xfc\xe6\x98\x1d\x25\xe4\xbd\xf5\x73\xbc\x8a\x49\x60\x7f\x19\xcd\xe7\x9f\x71\x50\xed\x59\x73\x31\x89\xd5\x9e\x12\x3c\xc7\x89\x97\xa6\xa1\x23\xf7\x55\x4c\xfe\xba\x8e\xa6\x90\xae\xc8\x75\x52\xd1\x6c\x9c\x24\x7b\x6f\x82\xd3\xb9\x98\xbc\x89\x89\x27\xee\xbd\x19\x13\x1e\x35\xf3\x04\x46\x77\xe2\x4d\xfc\x09\x00\x00\xff\xff\xbc\x34\x80\x62\x48\x03\x00\x00")

func bootstrapInjectGoBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapInjectGo,
		"bootstrap/inject.go",
	)
}

func bootstrapInjectGo() (*asset, error) {
	bytes, err := bootstrapInjectGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/inject.go", size: 840, mode: os.FileMode(436), modTime: time.Unix(1501967388, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapVpnMeshbirdmasterSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x92\x41\x6b\x1b\x31\x10\x85\xef\xfa\x15\xaf\xde\x10\x5a\x88\x77\x4f\xbd\x14\xda\x43\x9a\x85\xba\x21\xa1\xb4\xa1\x25\xa7\xa2\xd5\x8e\x57\x13\x6b\xa5\x45\x1a\xc5\x31\x84\xfe\xf6\xa2\xb5\x43\xec\x5f\x10\xdd\x66\xe6\xe9\xd3\x7b\x8c\xaa\x77\x4d\x4e\xb1\xe9\xd8\x37\xe4\x1f\xd1\xe9\x64\x55\x22\xc1\x92\x94\xe9\xf1\x4f\xa9\x0a\xcb\x37\x3a\xaa\xc2\x9d\xa5\x44\x78\xd4\x2e\x53\x82\x8e\x04\xf6\x0f\x64\x84\x7a\xb0\x97\x00\xb1\x84\x64\x22\x4f\x52\xe3\x0f\xcd\x02\x7a\x9a\x1c\x1b\x16\xb7\x83\x0f\x82\x9c\xd8\x0f\xd0\x10\x1a\x27\xa7\xa5\x14\x4e\xfb\x21\xeb\x81\x20\xe1\x80\x9b\x39\xfb\x47\x54\x05\x9d\xca\x84\xbc\x09\x39\xce\x32\x4b\xc8\x89\x62\xe9\x3a\x1e\x79\x96\x73\x2c\x3d\x84\xf5\x09\x39\x0c\x6c\xc0\xbe\x08\x12\x61\xcd\x8e\x52\x8d\xcb\x1d\x7a\x4a\x3c\x78\x68\xe7\x5e\x03\x1c\x42\x25\x1b\xb2\xeb\x55\x85\x8e\xa0\x3b\x37\xbb\xea\x08\x65\x05\x5a\x10\xb3\x17\x1e\xe9\x02\xda\xf7\xfb\xb4\x96\x9c\x3b\x64\x46\x24\xed\xb0\x0d\x71\x53\x63\xb5\xc6\x2e\x64\x78\xa2\x1e\x26\xf8\x9e\x85\x83\xd7\x6e\x6f\xe9\x02\xdb\xc8\x42\x60\x29\xe6\xe6\x15\x57\x08\x11\xa3\xde\x10\xb4\x0f\x62\x29\x9e\x90\x6b\x55\xa9\x4a\xdd\xb4\xbf\xbe\x5d\xae\x7e\x5e\xfd\xbd\x6e\xef\x3f\x2f\x56\xb7\xdf\xdb\xaf\x77\xed\x55\xe9\x5e\xb7\xf7\x8b\xb7\xfc\x18\xaa\xc2\xef\x1f\xb7\xb8\xa1\x64\x95\xc9\xd1\xc1\x8a\x4c\x9f\x9a\x66\xa4\x64\x3b\x8e\x7d\x6d\xc2\xd8\xb0\x4f\xa2\x9d\xab\x93\xc5\x33\x92\x55\x2f\x43\x78\xda\xe2\xfc\x0b\x1a\x19\xa7\xc6\x85\x61\x43\xbb\xd3\xa8\x67\xef\x8d\x96\xe3\x31\x9e\x61\xb2\x60\xd9\x63\x81\x05\x96\x6b\x7c\xfc\xa0\xc8\xd8\x80\xb3\xe3\x7b\x38\x20\xeb\x02\xa4\xa7\x29\x44\xc1\x29\xf7\xb8\x7a\xb5\xf3\x10\xd8\xe3\x5c\xfd\x0f\x00\x00\xff\xff\x1a\x16\x9c\x11\x89\x03\x00\x00")

func bootstrapVpnMeshbirdmasterShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapVpnMeshbirdmasterSh,
		"bootstrap/vpn/meshbirdMaster.sh",
	)
}

func bootstrapVpnMeshbirdmasterSh() (*asset, error) {
	bytes, err := bootstrapVpnMeshbirdmasterShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/vpn/meshbirdMaster.sh", size: 905, mode: os.FileMode(436), modTime: time.Unix(1502217673, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapVpnMeshbirdnodeSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcb\xbf\x0a\xc2\x30\x10\x07\xe0\xfd\x9e\xe2\x27\x15\x37\x7b\xbb\xe0\x22\x16\x14\xa9\x88\x82\xe0\x24\xfd\x73\x70\x91\x34\x29\xb9\x54\x1c\xc4\x67\x77\x12\x1c\xbf\xe1\x2b\x66\x3c\x59\xe2\xd6\x05\x96\xf0\x44\xdb\x98\x92\x49\xc6\x52\xa8\xeb\xf1\x21\x2a\x70\x3d\x1d\x51\x8b\x29\x75\x53\xf2\xd0\x9c\xc7\x15\xf3\x20\xa6\xad\x4b\x7d\xd9\xc5\x81\x5d\xb0\xdc\x78\x5f\x9a\xe2\x0d\x53\x92\xd7\x18\x53\x46\x5d\x5d\x76\x9b\xfd\x79\x7b\x3f\x54\xb7\xf5\xfc\x5f\xf4\xeb\x78\x44\x17\xb0\xa0\x6f\x00\x00\x00\xff\xff\x89\x0c\x83\x2f\x87\x00\x00\x00")

func bootstrapVpnMeshbirdnodeShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapVpnMeshbirdnodeSh,
		"bootstrap/vpn/meshbirdNode.sh",
	)
}

func bootstrapVpnMeshbirdnodeSh() (*asset, error) {
	bytes, err := bootstrapVpnMeshbirdnodeShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/vpn/meshbirdNode.sh", size: 135, mode: os.FileMode(436), modTime: time.Unix(1502179902, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapVpnOpenvpnmasterSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\xed\x4f\xe3\x3c\x12\xff\xee\xbf\x62\x2e\x45\x7a\x9e\x07\x6d\x62\x8a\xd8\xbd\x7d\xa1\x68\xa1\xd7\xe3\xaa\xdd\xa5\x55\x29\x9c\x90\x2a\x21\xd7\x99\x36\xde\xa6\x76\x64\x3b\x85\x2c\xc7\xfe\xed\x27\x27\x69\x69\xda\x02\xed\x3e\x1f\x96\x2f\x25\xf3\xf2\x9b\x19\x7b\xde\x5c\xfb\x07\x4d\x8d\xa6\x43\x21\x29\xca\x19\x0c\x99\x89\x88\x41\x0b\x3e\x12\x1e\xc2\x4f\x42\x6a\xe0\xff\xa6\x3f\x52\x83\x7e\x84\x06\x61\xc6\xe2\x14\x0d\x30\x8d\x20\xe4\x77\xe4\x16\x43\x10\xd2\x2a\xb0\x11\x82\xe1\x5a\x24\x36\x80\xff\x62\x2e\x80\xf7\x49\x2c\xb8\xb0\x71\x06\x52\x59\x48\x8d\x90\x63\x60\x60\x71\x9a\xc4\xcc\xba\x8f\x98\xc9\x71\xca\xc6\x08\x56\x95\x70\x39\x4e\x61\x84\xd4\x80\x19\xc7\x41\xc9\x55\xaa\x73\xb1\x08\x21\x35\xa8\x1d\x35\x16\x53\x91\x8b\x0b\xed\x68\xa0\x46\x15\x64\x35\x16\x1c\x84\x74\x02\x06\x61\x24\x62\x34\x01\x9c\x65\x10\xa2\x11\x63\x09\x2c\x8e\x9f\x02\x28\x83\x32\x91\x4a\xe3\x90\xd4\x60\x88\xc0\x86\x71\xee\xd5\x10\xc1\x5d\x01\xb3\xa0\x53\x69\xc5\x14\xdf\x00\x93\x61\x11\x6d\x84\x71\x5c\xc6\x0c\x1a\x59\x0c\x77\x4a\x4f\x02\x68\x8f\x20\x53\x29\x48\xc4\x10\xb8\x92\xa1\xb0\x42\x49\x16\x17\x2e\xbd\x81\x3b\x2d\x2c\x82\xb0\xce\xb9\xfc\x8a\x6b\xa0\x34\x4c\xd9\x04\x81\x49\x65\x23\xd4\x15\xe4\x80\xd4\x48\x8d\x74\xba\xad\x8b\xeb\xee\xc5\xed\x97\xd6\x4d\xb3\x73\x75\xd1\xef\xdd\x34\xbc\xde\xa5\xb7\x4c\xef\xf6\x3a\xd7\xed\x8b\x66\xab\xe1\x9d\x9d\x57\x18\xcd\x76\xff\xa6\xe1\x9d\x61\x3c\xd6\x2c\xc4\x0a\xab\xd3\x3b\x6f\x78\x5f\xd2\xa1\xe0\x4a\xcb\x0a\xa7\xf5\xed\xb4\xfd\xb5\xe1\x69\xa5\xec\xe7\x58\x71\x16\x47\xca\xd8\xaa\xee\xd5\x33\xaa\x17\xa7\xdf\x5a\x0d\xcf\xa0\x9e\xa1\xf6\x7e\x67\xce\x92\x6e\xaf\x7d\x7d\xda\x6f\xdd\xb6\xbb\x8d\xbd\x3f\x79\xaa\x63\x88\xac\x4d\x3e\x52\x5a\x7f\xf7\x21\x38\x7c\x7b\x14\x94\xbf\x74\x8a\x96\x85\xcc\x32\x3a\xab\x53\x21\x2d\xea\x11\xe3\x68\x68\xa2\xc5\x8c\x59\xa4\x07\x54\x24\xb3\x23\xca\xc2\x50\xa3\x31\x7f\xb9\x42\xec\x24\x28\xaf\xbb\x17\x84\xb0\xc4\xfa\x63\xb4\x90\x26\x21\xb3\xb8\xf8\x14\xd2\x58\x97\x63\x7e\x06\x2a\x41\x39\x4b\x24\x20\x33\x99\xaf\x0d\x23\xc4\x5d\xb6\xcf\x59\x28\x34\xfc\xa4\x25\xdb\xe7\x8c\x10\x83\x21\xf8\x02\x7c\x04\xcf\x50\xbc\x4f\x94\xb6\xf0\xa5\x75\x73\x5b\xde\x79\xb0\xbf\x81\xd8\x18\x78\x7b\x0f\xeb\xf9\xf1\x38\xf0\xa8\x57\x81\xa7\x33\xa6\xcd\xb3\x26\xe6\xe9\x53\xb5\xb1\x48\xaa\x15\x23\x73\xfa\xae\x56\x5c\x2e\xae\x44\xe1\xb2\x73\x35\x84\x76\x7f\x67\xff\x3b\xbd\xf3\x2a\xb0\xcb\xed\x15\xdc\x4e\xef\x7c\x57\xd8\xbc\x0e\xaa\xc0\x45\x69\xac\x40\xe7\xc4\x9d\x7d\xbe\x5a\x71\xf9\x6a\xcd\xe3\xab\x5d\x31\x5d\xf5\x55\x51\xf3\x7a\x5c\xc1\x75\xb4\xe7\x90\x49\xad\x06\xe7\x28\x51\x33\xeb\x9a\x9f\x2b\x63\xe0\xa8\xad\x18\x09\xce\x2c\x9a\x7c\x18\x2d\xa7\xad\x51\xa9\xe6\xae\x6b\x6b\x43\x02\xca\x63\x64\xd2\x67\x71\x4c\x02\x3a\x4c\x45\x1c\xfa\x9c\x81\xef\x0f\x99\xe5\xd1\x82\x34\xc1\xcc\x2f\xa1\x4b\x16\xac\xfb\xb7\x90\x0e\x23\x32\x2f\x22\xdf\x1f\xa3\x9c\x60\x06\xbe\x6f\x90\x6b\xb4\x30\xc1\xcc\x50\xcb\x82\x09\x66\x55\xd7\x79\x2c\x50\xda\xaa\xeb\x4b\xf6\x17\x86\x0b\xb9\x95\xb8\xcb\xfa\x76\x0d\x7c\x24\xc6\xa9\x66\xae\x89\x13\x9e\x54\xcf\x2b\xb7\xcd\x59\xc0\xb5\xdd\xcc\x70\x76\xd6\x19\xeb\xa1\xe6\x08\x03\x02\x00\xdb\x89\x6f\xc6\xb5\xcf\x19\x0c\xa3\xc3\x83\xa3\xf7\x41\x82\x53\xa0\x68\xf9\x9c\x4f\xc6\xa9\xfc\x21\x12\xf0\x39\xe4\x9b\x87\x89\x98\x46\x1a\xaa\x85\x00\xc5\x7b\x36\x4d\x62\x34\xd4\xe4\xbf\x7e\x71\x1c\x7e\x3e\x4e\x69\x71\x81\x81\xa3\x05\xe3\x1f\xf0\x3f\xb0\x88\x15\xfc\x8d\x81\x2a\x39\x72\x47\x5d\x83\xd3\xf0\x7b\x6a\x2c\xf4\xbf\x5e\xae\x9c\x72\x25\xb5\x07\x9f\x6c\x6c\x7c\x96\xda\x08\xca\xf0\x0e\x82\x7d\xba\x46\xa3\xde\x76\x96\x97\xb0\x37\x80\x30\x97\x4d\x7e\x28\x34\x72\xe7\x09\x1c\x6c\x89\x9a\xc7\xd3\x92\xf9\xd2\x70\xda\xba\xf4\xeb\x87\xef\xfd\xe6\x59\x13\x78\x24\x12\x5c\x2d\xd6\xc1\x27\x2e\x12\x37\xe6\x97\x24\x83\x7d\xba\x4e\xfc\x95\x98\x36\xa0\x30\xc8\x83\xbc\xfc\xcf\xe9\xe1\xdb\x77\xbb\x04\x74\xe9\xc6\x9a\xdb\xb6\xdc\xc6\x33\xd6\x2a\x4d\x56\x03\xc9\xb9\x52\x0d\x55\x98\x05\xfb\x74\xe9\xeb\x17\x5c\x77\x78\xb9\x11\x90\x2a\xff\x0d\xf6\x69\xe5\x7b\x5b\x4c\xf2\x74\x17\xed\x2e\x8c\x94\xbe\x63\x3a\x14\x72\xbc\x62\xac\x26\xd1\x06\x6e\xae\x07\x22\xb9\x2d\xa5\x82\x7d\xba\x81\xda\xa8\xcf\x4d\x9b\xcc\x70\x1b\x97\x66\x4c\x66\x2c\x4e\xb9\x8d\xc1\x58\xa6\xed\x7c\xce\x7f\xde\xd0\xc8\x9e\x44\xb1\x70\xec\x05\xd9\x8d\x3d\xac\x52\x1f\xf9\xe5\x34\x35\x3a\x01\xb7\x88\x16\xf9\xaa\x74\x06\xc6\xea\x94\xdb\x54\x63\x7e\x65\x06\xb9\xfb\x57\x58\x32\x9d\xb8\x5d\xc3\x77\xdd\xab\x40\x2c\x0b\xd9\xd0\xbc\x92\x09\x8f\xa6\x2a\x84\x7f\x1e\x1c\x3c\x27\x90\x9b\x7c\xf2\x2a\xe7\xc1\x48\xab\x29\xcc\x3b\x84\xeb\x8d\xbf\xd2\x44\x0a\x73\xf9\x91\xae\x1b\x1f\x32\x83\x95\x8e\x11\x82\xc6\xa9\xb2\xf9\xcd\x96\xeb\x58\xf5\x5a\x4b\xf6\x74\x3e\x5e\xfc\x3a\xd4\xeb\x1f\x8e\xe6\xf4\xbd\x87\xa7\x9d\xf0\xb1\xe0\x78\xaf\x9a\x75\x75\x50\xa4\xf5\xc7\x32\x15\xdd\xcb\x40\xa7\x72\xb1\x05\xee\x50\x16\x2f\x18\xdb\xb1\x18\x5e\x73\xfb\x9b\x7b\x52\x08\x5b\xbe\xbd\x10\x42\x1c\xb1\x34\xae\x0c\xc4\xaa\x49\xce\xa0\x98\x65\x74\x50\x7b\xfa\x7f\x7b\x97\x1d\x30\xcc\xef\xb3\x40\x59\xa1\x6c\x8f\xe5\xfa\x71\xa9\x38\xc1\x8c\x0e\x6a\x2b\x84\xd7\xc3\x6f\x96\x35\x83\xaf\x74\xe1\xfb\xe7\x7a\xef\x76\xae\x6e\xd1\x71\xb7\x48\xeb\xf9\x1b\xd1\xa0\x75\xcf\x57\x43\x90\x47\x0a\xbc\xea\x34\xaa\x7b\x70\x72\xf2\x12\x5a\xa1\x54\xbc\x1b\xfd\xbc\xfa\x85\xcd\xe0\x70\x3b\xb5\x34\xa9\xb6\xd7\xe2\x41\xe3\x6b\x34\x2a\x9e\xe5\x5a\xdb\xe1\x84\xea\x4e\xfe\x5d\xa4\x4a\x0f\x74\x1b\x0c\x71\x8b\xec\xbf\xda\xbd\xc6\xda\x6e\x43\x3a\x57\xfd\xee\x55\xbf\x64\x56\x11\xc9\xd9\xe9\x65\xeb\xb6\xd9\xb9\xf8\x77\xfb\x7c\x8d\xb9\x6c\x8e\x33\x0b\x7b\x0f\x4b\xd2\x8f\xe5\x32\x76\xfc\x67\x1e\x94\x8f\xf0\xc7\x31\x67\x27\x7f\xfc\x55\xd2\xf7\x1e\x4a\x87\x1e\xe7\xeb\xdf\xba\x3c\xe5\xec\x64\x20\x8f\x5d\x0d\x6c\x56\x2c\xf6\xce\x67\xb5\x9d\xde\x40\x1e\x4f\x30\x7b\x51\xdd\x15\xc6\x06\x75\xa7\x36\x90\xc7\xf3\x1d\x67\x23\x44\xb9\xf7\x6c\xd0\x5e\x57\x3b\x71\x0b\xfa\xe2\xa8\x97\xbc\x2f\x0e\x70\xc3\x68\x59\x96\x00\x6a\xa7\x09\x25\xe4\xff\x01\x00\x00\xff\xff\x88\x67\x2e\x1a\xe3\x12\x00\x00")

func bootstrapVpnOpenvpnmasterShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapVpnOpenvpnmasterSh,
		"bootstrap/vpn/openvpnMaster.sh",
	)
}

func bootstrapVpnOpenvpnmasterSh() (*asset, error) {
	bytes, err := bootstrapVpnOpenvpnmasterShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/vpn/openvpnMaster.sh", size: 4835, mode: os.FileMode(436), modTime: time.Unix(1502272658, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapVpnOpenvpnnodeSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x93\x41\x6f\xd3\x40\x10\x85\xef\xfb\x2b\x1e\x72\xa5\x82\xd4\x78\x29\x2a\x48\xa0\x82\x80\x92\x4a\xe1\x90\x44\xa8\x2a\xc7\x6a\xb2\x3b\x89\x97\x6e\x66\xad\xdd\x71\x4a\x84\xe0\xb7\x23\x3b\x06\x5a\xfe\x40\x7d\xb1\xf6\xcd\xa7\xe7\x79\x9e\xd9\xea\x89\xed\x4a\xb6\xab\x20\x96\x65\x87\x15\x95\xc6\x14\x56\x4c\xd8\x38\x8f\x5f\xc6\x54\x98\x3c\xd2\x63\x2a\x5c\x35\x5c\x18\x3b\x8a\x1d\x17\x50\x66\x04\xf9\xc6\x4e\xd9\x23\x88\x26\x68\xc3\x28\x2e\x87\x56\x6b\x7c\xe5\x01\xe0\xef\x6d\x0c\x2e\x68\xdc\x43\x92\xa2\x2b\x41\x36\x20\x28\x6f\xdb\x48\xda\x1f\x22\xc9\xa6\xa3\x0d\x43\xd3\x68\x37\xf8\x1c\x3e\x62\x2a\x50\xe9\x2b\x2c\x2e\x75\x79\xc0\x1a\x46\x57\x38\xf7\x6a\x0c\xdb\x30\xe0\x21\xf7\x1a\xd2\xfa\x81\x73\xda\x04\x87\x20\x3d\x50\x18\xeb\x10\xb9\xd4\xf8\xb8\x87\xe7\x12\x36\x02\x8a\xf1\x5f\x80\x31\x54\x69\x52\x17\xbd\xa9\xb0\x62\xd0\x2a\x0e\x5d\xad\x18\xfd\x08\x48\x91\x3b\xd1\xb0\xe5\x13\x90\xf8\x43\xda\x86\x63\x1c\x33\x23\x33\x45\xdc\xa5\x7c\x5b\x63\xb6\xc6\x3e\x75\x10\x66\x0f\x97\xc4\x07\x0d\x49\x28\x1e\x5a\x3a\xc1\x5d\x0e\xca\x08\xda\x37\x37\x8c\xb8\x42\xca\xd8\xd2\x2d\x83\x24\x69\xc3\xf9\x81\x73\x6d\x2a\x53\x99\xcc\xe4\x31\xc9\x98\x78\x1c\x1f\x63\xb1\x9c\xce\xaf\x97\xf3\x9b\x8b\xc5\xfc\x12\xe7\xe7\xd3\xc5\xa5\x99\xcd\x3f\x4f\x2f\xae\xa6\x9f\x7a\xc9\xf4\xc2\x23\xee\x8a\x59\x7e\x99\x5d\x7f\xb8\x9a\xde\xcc\x96\x6f\x8f\x9e\xba\x2e\x47\x34\xaa\xed\x1b\x6b\x4f\x5f\xbd\xae\x5f\xbc\x3c\xab\xc7\xb7\xdd\xb2\x92\x27\x25\xbb\x3b\xb5\x41\x94\xf3\x9a\x1c\x17\xdb\xe6\xb0\x23\x65\xfb\xdc\x86\x76\x77\x66\xc9\xfb\xcc\xa5\x3c\xeb\x2f\xc0\xa2\x65\xb9\x5e\xce\x8d\xa1\x56\x27\x1b\x56\x74\xad\x27\xe5\xbf\xc7\x20\x45\xfb\xd9\x4e\xf6\x48\x2d\xcb\xae\x15\x63\xd8\x35\x09\x47\x3f\xee\xff\xb5\x9f\x78\x07\xcb\xea\xec\x08\x59\x17\x03\x8b\x96\xda\x25\x59\x1b\x53\xf6\x45\x79\xeb\x34\xa2\x28\x65\xfd\x63\xf5\x7e\xa4\xee\xd5\x59\x86\x4d\xf9\x1f\x30\xbf\x03\x00\x00\xff\xff\xdc\x14\xa7\x3b\xcc\x03\x00\x00")

func bootstrapVpnOpenvpnnodeShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapVpnOpenvpnnodeSh,
		"bootstrap/vpn/openvpnNode.sh",
	)
}

func bootstrapVpnOpenvpnnodeSh() (*asset, error) {
	bytes, err := bootstrapVpnOpenvpnnodeShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/vpn/openvpnNode.sh", size: 972, mode: os.FileMode(436), modTime: time.Unix(1502272657, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bootstrap/README.md": bootstrapReadmeMd,
	"bootstrap/amazon_k8s_ubuntu_16.04_master.sh": bootstrapAmazon_k8s_ubuntu_1604_masterSh,
	"bootstrap/amazon_k8s_ubuntu_16.04_node.sh": bootstrapAmazon_k8s_ubuntu_1604_nodeSh,
	"bootstrap/digitalocean_k8s_ubuntu_16.04_master.sh": bootstrapDigitalocean_k8s_ubuntu_1604_masterSh,
	"bootstrap/digitalocean_k8s_ubuntu_16.04_node.sh": bootstrapDigitalocean_k8s_ubuntu_1604_nodeSh,
	"bootstrap/inject.go": bootstrapInjectGo,
	"bootstrap/vpn/meshbirdMaster.sh": bootstrapVpnMeshbirdmasterSh,
	"bootstrap/vpn/meshbirdNode.sh": bootstrapVpnMeshbirdnodeSh,
	"bootstrap/vpn/openvpnMaster.sh": bootstrapVpnOpenvpnmasterSh,
	"bootstrap/vpn/openvpnNode.sh": bootstrapVpnOpenvpnnodeSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bootstrap": &bintree{nil, map[string]*bintree{
		"README.md": &bintree{bootstrapReadmeMd, map[string]*bintree{}},
		"amazon_k8s_ubuntu_16.04_master.sh": &bintree{bootstrapAmazon_k8s_ubuntu_1604_masterSh, map[string]*bintree{}},
		"amazon_k8s_ubuntu_16.04_node.sh": &bintree{bootstrapAmazon_k8s_ubuntu_1604_nodeSh, map[string]*bintree{}},
		"digitalocean_k8s_ubuntu_16.04_master.sh": &bintree{bootstrapDigitalocean_k8s_ubuntu_1604_masterSh, map[string]*bintree{}},
		"digitalocean_k8s_ubuntu_16.04_node.sh": &bintree{bootstrapDigitalocean_k8s_ubuntu_1604_nodeSh, map[string]*bintree{}},
		"inject.go": &bintree{bootstrapInjectGo, map[string]*bintree{}},
		"vpn": &bintree{nil, map[string]*bintree{
			"meshbirdMaster.sh": &bintree{bootstrapVpnMeshbirdmasterSh, map[string]*bintree{}},
			"meshbirdNode.sh": &bintree{bootstrapVpnMeshbirdnodeSh, map[string]*bintree{}},
			"openvpnMaster.sh": &bintree{bootstrapVpnOpenvpnmasterSh, map[string]*bintree{}},
			"openvpnNode.sh": &bintree{bootstrapVpnOpenvpnnodeSh, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

